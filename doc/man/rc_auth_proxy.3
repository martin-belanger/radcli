.\" File automatically generated by doxy2man0.2
.\" Generation date: Fri Sep 14 2018
.TH rc_auth_proxy 3 2018-09-14 "radcli" "Radius client library"
.SH "NAME"
rc_auth_proxy \- 
.SH SYNOPSIS
.nf
.B #include <radcli/radcli.h>
.sp
\fBint rc_auth_proxy\fP(
    \fBrc_handle    *\fP\fIrh\fP,
    \fBVALUE_PAIR   *\fP\fIsend\fP,
    \fBVALUE_PAIR  **\fP\fIreceived\fP,
    \fBchar         *\fP\fImsg\fP
);
.fi
.SH DESCRIPTION
.PP 
Builds an authentication request for proxying
.PP 
Builds an authentication request with the value_pairs send and submits it to a server. Works for a proxy; does not add IP address, and does does not rely on config file.
.SH PARAMETERS
.TP
.B rh
a handle to parsed configuration. 

.TP
.B send
a VALUE_PAIR array of values (e.g., PW_USER_NAME). 

.TP
.B received
an allocated array of received values. 

.TP
.B msg
must be an array of PW_MAX_MSG_SIZE or NULL; will contain the concatenation of any PW_REPLY_MESSAGE received. 

.SH STRUCTURES
.SS ""
.PP
.sp
.PP 
this structure directly. Use the rc_avpair_get_ functions. 
.sp
.RS
.nf
\fB
struct rc_value_pair {
  char                   \fIname\fP;      // attribute name if known. 
  unsigned               \fIattribute\fP; // attribute numeric value of type rc_attr_id. 
  rc_attr_type           \fItype\fP;      // attribute type. 
  uint32_t               \fIlvalue\fP;    // attribute value if type is PW_TYPE_INTEGER, PW_TYPE_DATE or PW_TYPE_IPADDR. 
  char                   \fIstrvalue\fP;  // contains attribute value in other cases. 
  struct rc_value_pair  *\fInext\fP;
  char                   \fIpad\fP;       // unused pad 
};
\fP
.fi
.RE
.SS ""
.PP
.sp
.PP 
this structure directly. Use the rc_avpair_get_ functions. 
.sp
.RS
.nf
\fB
struct rc_value_pair {
  char                   \fIname\fP;      // attribute name if known. 
  unsigned               \fIattribute\fP; // attribute numeric value of type rc_attr_id. 
  rc_attr_type           \fItype\fP;      // attribute type. 
  uint32_t               \fIlvalue\fP;    // attribute value if type is PW_TYPE_INTEGER, PW_TYPE_DATE or PW_TYPE_IPADDR. 
  char                   \fIstrvalue\fP;  // contains attribute value in other cases. 
  struct rc_value_pair  *\fInext\fP;
  char                   \fIpad\fP;       // unused pad 
};
\fP
.fi
.RE
.SH RETURN VALUE
.PP
received value_pairs in received, messages from the server in msg (if non-NULL) and OK_RC (0) on success, CHALLENGE_RC (3) on Access-Challenge received, negative on failure as return value. 
.SH SEE ALSO
.PP
.nh
.ad l
\fIradcli.h\fP(3), \fIrc_aaa\fP(3), \fIrc_aaa_ctx\fP(3), \fIrc_aaa_ctx_free\fP(3), \fIrc_aaa_ctx_get_secret\fP(3), \fIrc_aaa_ctx_get_vector\fP(3), \fIrc_aaa_ctx_server\fP(3), \fIrc_acct\fP(3), \fIrc_acct_proxy\fP(3), \fIrc_add_config\fP(3), \fIrc_apply_config\fP(3), \fIrc_auth\fP(3), \fIrc_auth_proxy\fP(3), \fIrc_avpair_add\fP(3), \fIrc_avpair_assign\fP(3), \fIrc_avpair_copy\fP(3), \fIrc_avpair_free\fP(3), \fIrc_avpair_gen\fP(3), \fIrc_avpair_get\fP(3), \fIrc_avpair_get_attr\fP(3), \fIrc_avpair_get_in6\fP(3), \fIrc_avpair_get_raw\fP(3), \fIrc_avpair_get_uint32\fP(3), \fIrc_avpair_insert\fP(3), \fIrc_avpair_log\fP(3), \fIrc_avpair_new\fP(3), \fIrc_avpair_next\fP(3), \fIrc_avpair_parse\fP(3), \fIrc_avpair_remove\fP(3), \fIrc_avpair_tostr\fP(3), \fIrc_buildreq\fP(3), \fIrc_check\fP(3), \fIrc_check_tls\fP(3), \fIrc_conf_int\fP(3), \fIrc_conf_srv\fP(3), \fIrc_conf_str\fP(3), \fIrc_config_free\fP(3), \fIrc_config_init\fP(3), \fIrc_destroy\fP(3), \fIrc_dict_findattr\fP(3), \fIrc_dict_findval\fP(3), \fIrc_dict_findvend\fP(3), \fIrc_dict_free\fP(3), \fIrc_dict_getattr\fP(3), \fIrc_dict_getval\fP(3), \fIrc_dict_getvend\fP(3), \fIrc_find_server_addr\fP(3), \fIrc_get_socket_type\fP(3), \fIrc_get_srcaddr\fP(3), \fIrc_getport\fP(3), \fIrc_mksid\fP(3), \fIrc_new\fP(3), \fIrc_openlog\fP(3), \fIrc_own_hostname\fP(3), \fIrc_read_config\fP(3), \fIrc_read_dictionary\fP(3), \fIrc_read_dictionary_from_buffer\fP(3), \fIrc_send_server\fP(3), \fIrc_setdebug\fP(3), \fIrc_test_config\fP(3), \fIrc_tls_fd\fP(3)
.ad
.hy
